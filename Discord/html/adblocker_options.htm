<!DOCTYPE html>
<HTML i18n-values="dir:textdirection;" id="uber" class dir="ltr">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>Ad blocker options</title>
 <!-- <link rel="stylesheet" href="css/chrome_shared.css" type="text/css" /> -->
<style type="text/css">
@import url(alias_definitions.css);
</style>
<style type="text/css">
.alias-img {
  display: none;
  height: 14px;
  padding: 0px;
  vertical-align: middle;
  width: 14px;
}
.alias-name {
  padding: 2px;
  display: inline-block;
  width: 180px;
  min-width: 180px;
  vertical-align: middle;
}
.url-path {
  display: inline-block;
  width: 340px;
  min-width: 340px;
  padding-left: 12px;
  vertical-align: middle;
  white-space: nowrap;
  -webkit-box-flex: 1;
  overflow: hidden;
  text-overflow: ellipsis;
}
#alias-definitions-list {
height: 80px;
max-height: 80px;
}
#alias-frame {
  margin: 0px;
  max-height: 330px;
  max-width: 580px;
  overflow:auto;
}
</style>
<link href="css/common.css" rel="stylesheet" type="text/css" />
<script src="js/cr.js" type="text/javascript"></script>
<script src="js/cr/event_target.js" type="text/javascript"></script>
<script src="js/cr/ui.js" type="text/javascript"></script>
<script src="js/cr/ui/array_data_model.js" type="text/javascript"></script>
<script src="js/cr/ui/list_selection_model.js" type="text/javascript"></script>
<script src="js/cr/ui/list_selection_controller.js" type="text/javascript"></script>
<script src="js/cr/ui/list_single_selection_model.js" type="text/javascript"></script>
<script src="js/cr/ui/list_item.js" type="text/javascript"></script>
<script src="js/cr/ui/list.js" type="text/javascript"></script>
<script src="js/cr/ui/focus_manager.js" type="text/javascript"></script>
<script src="js/util.js" type="text/javascript"></script>
<script src="deletable_item_list.js" type="text/javascript"></script>
<script src="alias_definitions.js" type="text/javascript"></script>
<script type="text/javascript">
<!--//Kent@FlashPeak
var AliasDefinitionList = options.AliasDefinitionList;
var aliasDefinitionList;
var is_dblclick_alias_list;
var alias_sorted_direction = 'asc';
var url_sorted_direction = 'desc';
var available_filter_names_ = [];
var available_filter_titles_ = [];
var available_filter_urls_ = [];
function getByID(elem_id) {
  return $(elem_id);
}
function getResText(res_id) {
  var res_elem = getByID(res_id);
  if (res_elem != undefined) {
    return res_elem.innerText;
  }
}
function isValidFileName(str_file) {
  if (str_file=="" || str_file==undefined || str_file.length>255) {
    return false;
  }
  var s=":/\\*?\"<>|";
  for(var i=0;i< s.length;i++) {
    if(str_file.indexOf(s[i])!=-1){
      return false;
    }
  }
  return true;
}
function isUrl(str_url) {
  str_url=str_url.toLowerCase();
  var RegUrl = new RegExp();
  RegUrl.compile("^https?://[a-z0-9-_]+\\.[a-z0-9-_%&\?\/\+.=]+$");
  if (!RegUrl.test(str_url)) {
    return false;
  }
  return true;
}
function lzAlert(text_res_id) {
  alert(getResText(text_res_id));
}
function lzConfirm(text_res_id) {
  return confirm(getResText(text_res_id));
}

function viewHelpOnline(help_name) {
  document.location.href="sjcmd://viewhelp " + help_name;
}
function validateInput() {
  if ($('filter-title').value == "" || !isValidFileName($('filter-title').value)) {
    lzAlert('RES_INVALID_FILTER');
    return false;
  }
  if ($('filter-url').value == "" || !isUrl($('filter-url').value)) {
    lzAlert('RES_INVALID_URL');
    return false;
  }
  return true;
}
function compareAliasInfo(alias1, alias2) {
  if (alias1.displayText > alias2.displayText) {
    return 1;
  } else if (alias1.displayText == alias2.displayText) {
    return 0;
  } else {
    return -1;
  }
}
function existFilterName(filter_name) {
  filter_name = filter_name.toLowerCase();
  filter_name = filter_name.trim();
  for (var i=0; i< aliasDefinitionList.dataModel.length; i++) {
    if ( aliasDefinitionList.dataModel.item(i).displayText.toLowerCase() == filter_name) {
      return i;
    }
  }
  return -1;
}
function existFilterUrl(filter_url) {
  filter_url = filter_url.toLowerCase();
  filter_url = filter_url.trim();
  for (var i=0; i< aliasDefinitionList.dataModel.length; i++) {
    if ( aliasDefinitionList.dataModel.item(i).displayUrl.toLowerCase() == filter_url) {
      return i;
    }
  }
  return -1;
}
function insertItem(filter_name, filter_url) {
  var i;
//  filter_name = filter_name.toLowerCase();
  filter_name = '' + filter_name;
  filter_url = '' + filter_url;
  filter_name = filter_name.trim();
  filter_url = filter_url.trim();

  if (existFilterName(filter_name) != -1) {
    lzAlert('RES_ITEM_ALREADY_EXISTS');
    return false;
  }
  if (existFilterUrl(filter_url) != -1) {
    lzAlert('RES_URL_ALREADY_EXISTS');
    return false;
  }

  var alias_info = {
    'displayText': filter_name,
    'displayUrl': filter_url
  };
  aliasDefinitionList.dataModel.push(alias_info);
  aliasDefinitionList.selectionModel.unselectAll();
  for (i=0; i< aliasDefinitionList.dataModel.length; i++) {
    if ( aliasDefinitionList.dataModel.item(i).displayText == filter_name) {
      aliasDefinitionList.selectionModel.setIndexSelected(i,true);
      break;
    }
  }
  return true;
}

function clearInput() {
  $('filter-title').value = "";
  $('filter-url').value = "";
}
function setAliasItem(index, alias, full_text) {
  var alias_info = {
    'displayText': alias,
    'displayUrl': full_text
  };
  aliasDefinitionList.dataModel.splice(index,1,alias_info);
}
function handleClose() {
  close();
}
function handleViewHelp() {
  viewHelpOnline("adblocker");
}
function handleAddNew() {
  if (!validateInput()) return;
  var alias = $('filter-title').value;
  var full_text = $('filter-url').value;
  if (insertItem(alias,full_text)) {
    clearInput();
  }
}
function handleAdd() {
  var filter_list = $('ad-blocker-filter-list');
  var filter_title = filter_list[filter_list.selectedIndex].text;
  var filter_url = filter_list[filter_list.selectedIndex].value;
  insertItem(filter_title,filter_url);
}
function handleSelectAliasList() {
  return false;
}

function handleSortByAlias() {
  var sort_direction = alias_sorted_direction == 'desc'?'asc':'desc';
  aliasDefinitionList.dataModel.sort('displayText',sort_direction);
  alias_sorted_direction = sort_direction;
  url_sorted_direction = 'desc';
}


document.onkeydown = function(e){
    if(!e) e = window.event;
    if((e.keyCode || e.which) == 13){
        getByID("close-button").click();
    }
}

var close_dialog_after_saved = true;
function $(id) {
  return document.getElementById(id);
}
function onOK() {
  close_dialog_after_saved = true;
  saveAdBlockerOptions();
}

function onCancel() {
  document.sjReturnValue = "";
  window.close();
}
function onHelp() {
  location.href = 'sjcmd://viewhelp ad-blocker';
}
function getAvailableFilterTitleFromName(filter_name) {
  var filter_name_trimed=filter_name.toLowerCase().trim();
  for(var i=0; i<available_filter_names_.length;i++) {
    if (available_filter_names_[i].toLowerCase().trim()==filter_name_trimed) {
      return available_filter_titles_[i];
    }
  }
  return filter_name;
}
function getAvailableFilterNameFromUrl(filter_url,default_name) {
  var filter_address=filter_url.toLowerCase().trim();
  for(var i=0; i<available_filter_urls_.length;i++) {
    if (available_filter_urls_[i].toLowerCase().trim()==filter_address) {
      return available_filter_names_[i];
    }
  }
  return default_name;
}
function saveAdBlockerOptions() {
  document.sjReturnValue = '';
  var i;
  var filter_names = [];
  var filter_urls = [];
  for (i = 0; i<aliasDefinitionList.dataModel.length; i++) {
    var filter_info = aliasDefinitionList.dataModel.item(i);
    if (isUrl(filter_info.displayUrl)) { //user filter
      filter_names.push(getAvailableFilterNameFromUrl(filter_info.displayUrl,filter_info.displayText));
      filter_urls.push(filter_info.displayUrl);
    }
  }
  var user_subscription_list = filter_names.join('%09') + '\v' + filter_urls.join('%09');
  location.href = 'sjcmd://SaveAdBlockerOptions(' + user_subscription_list + ')';
}
function cbSaveAdBlockerDone() {
  if (close_dialog_after_saved) {
    window.close();
  }
}
function showUserFilterList() {
  location.href = 'sjcmd://ShowUserFilterList()';
}
function showDomainWhiteList() {
  location.href = 'sjcmd://ShowDomainWhiteList()';
}
function initDialog(available_filter_names,available_filter_titles,available_filter_urls,user_titles, user_urls,subscribe_url,subscribe_title) {
  $('filter-url').value=subscribe_url;
  $('filter-title').value=subscribe_title;
  var filter_select = '';
  var filter_titles = '';
  var filter_names = '';
  var filter_urls = '';
  if (available_filter_names.indexOf('\t')!=-1) {
    filter_names = available_filter_names.split('\t');
    available_filter_names_ = filter_names;
  }
  if (available_filter_titles.indexOf('\t')!=-1) {
    filter_titles = available_filter_titles.split('\t');
    available_filter_titles_ = filter_titles;
  }
  if (available_filter_urls.indexOf('\t')!=-1) {
    filter_urls = available_filter_urls.split('\t');
    available_filter_urls_ = filter_urls;
  }
  var filter_list = $('ad-blocker-filter-list');
  if (filter_names.length == filter_titles.length) {
    for (var i = 0; i < filter_names.length; i++) {
      filter_list.add(new Option(filter_titles[i],filter_urls[i]));
    }
  }

  aliasDefinitionList = $('alias-definitions-list');
  AliasDefinitionList.decorate(aliasDefinitionList);
  AliasDefinitionList.deletable = true;

  var filter_info_list = [];

  //user filter list: user filter name and user filter urls.
  var title_list = '';
  var url_list = '';
  if (user_urls != '') {
    if (user_titles.indexOf('\t') != -1) {
      title_list = user_titles.split('\t');
    } else {
      title_list = [user_titles];
    }
    if (user_urls.indexOf('\t') != -1) {
      url_list = user_urls.split('\t');
    } else {
      url_list = [user_urls];
    }

    if ( title_list.length == url_list.length ) {
      for (var i = 0; i < title_list.length; i++) {
        var filter_info = {
          'displayText': getAvailableFilterTitleFromName(title_list[i]),
          'displayUrl': url_list[i]
        };
        filter_info_list.push(filter_info);
      }
    }
  }

  delete aliasDefinitionList.dataModel;
  aliasDefinitionList.autoExpands = true;
  aliasDefinitionList.dataModel = new cr.ui.ArrayDataModel(filter_info_list);

}
//-->
</script>
</head>
<BODY>
<div id="slimjet_alias_definitions_dialog" style="width:580px;">
  <table width="100%" border="0"  >
    <tr align="center">
      <td width="50%"><button type="button" onclick = "showUserFilterList();" style="min-width:130px">User filter list</button></td>
      <td><button type="button" onclick = "showDomainWhiteList();" style="min-width:130px" >Domain whitelist</button></td>
    </tr>
  </table>
  <p>Selected filters (Select only those you need to avoid performance hit.):</p>
  <div id="alias-list-container">
          <div id="alias-frame">
            <list id="alias-definitions-list" role="list" tabindex="0" aria-activedescendant has-element-focus="hasElementFocus">
            </list>
          </div>
        </div>    
  <table width="100%" border="0" cellspacing="0" style="margin-top:5px" >
    <tr align="center">
      <td width="1" style="white-space:nowrap">Available filters:</td>
      <td ><select name="ad-blocker-filter-list" id="ad-blocker-filter-list" style="border: 1px solid #ccc;width: 100%;" tabindex="0" role="list" aria-activedescendant has-element-focus="hasElementFocus">
      </select></td>
      <td width="1" ><button id="add-filter" onClick="handleAdd();" style="margin-left:5px; min-width:80px">Add</button></td>
    </tr>
  </table>
  <p>Add your own filter:</p>
  <table width="100%" border="0" cellspacing="0">
    <tr align="center">
      <td width="1" style="white-space:nowrap">Title:</td>
      <td width="120"><input id="filter-title" type="text" style="width:100%" /></td>
            <td width="1" style="white-space:nowrap; padding-left:5px">Url:</td>
            <td><input id="filter-url" type="text" style="width:100%" /></td>            
      <td width="1"><button id="add-new-filter" onClick="handleAddNew();" style="min-width:80px;margin-left:5px">Add</button></td>
    </tr>
  </table>
  <table width="100%" border="0" cellpadding="5">
    <tr align="center">
      <td width="33%"><button type="button" onclick = "onOK();" style="min-width:80px">OK</button></td>
      <td width="33%"><button type="button" onclick = "onCancel();" style="min-width:80px" >Cancel</button></td>
      <td width="33%"><button type="button" onclick = "onHelp();" style="min-width:80px" >Help</button></td>
    </tr>
  </table>

  <div id="slimjet_dialog_res" style="display:none">
    <span id="RES_INVALID_FILTER">Invalid filter name!</span>
    <span id="RES_INVALID_URL">Invalid url!</span>
    <span id="RES_ITEM_ALREADY_EXISTS">Duplicate filter name!</span>
    <span id="RES_URL_ALREADY_EXISTS">Duplicate Url!</span>
    <span id="RES_PLEASE_SELECT_ITEM">Please select an item!</span>
  </div>
</div>

</BODY>
</HTML>
